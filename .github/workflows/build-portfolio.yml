name: 🚀 Build Portfolio Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/stocktrader-api
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/stocktrader-frontend

jobs:
  # 🧪 Tests et validation
  test-and-validate:
    runs-on: ubuntu-latest
    name: 🧪 Tests & Validation
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: 🔧 Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🔨 Build Backend
      run: |
        cd backend/StockTrader.API
        dotnet restore
        dotnet build --no-restore
        echo "✅ Backend build successful"

    - name: 🔨 Build Frontend
      run: |
        cd frontend
        npm ci
        npm run build
        echo "✅ Frontend build successful"

    - name: 📊 Generate build report
      run: |
        echo "# 📊 Build Report" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Backend**: .NET 9 API with SignalR" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Frontend**: React 18 + TypeScript + Tailwind" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Database**: SQL Server with EF Core" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Real-time**: SignalR for live stock prices" >> $GITHUB_STEP_SUMMARY

  # 🐳 Build et publier les images Docker
  build-docker-images:
    runs-on: ubuntu-latest
    needs: [test-and-validate]
    name: 🐳 Build Docker Images
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔑 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Generate tags and labels for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏷️ Generate tags and labels for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/StockTrader.API
        file: ./backend/StockTrader.API/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}

    - name: 🐳 Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

    - name: 📦 Generate deployment summary
      run: |
        echo "# 🎉 Images Docker créées avec succès !" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📥 Pour les recruteurs :" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Télécharger et lancer l'application :" >> $GITHUB_STEP_SUMMARY
        echo "curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.production.yml" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **App sera disponible sur**: http://localhost:3000" >> $GITHUB_STEP_SUMMARY
        echo "📚 **API Documentation**: http://localhost:5172/swagger" >> $GITHUB_STEP_SUMMARY

  # 🎯 Release automatique
  create-release:
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    if: github.ref == 'refs/heads/main'
    name: 🎯 Create Release
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Create release tag
      id: tag
      run: |
        TAG="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: 🎉 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: 🚀 StockTrader ${{ steps.tag.outputs.tag }}
        body: |
          # 🎯 StockTrader - Plateforme de Trading Simulée
          
          ## 🚀 Lancement rapide pour recruteurs
          
          ```bash
          # Une seule commande pour tout lancer :
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/quick-start.sh | bash
          ```
          
          ## 🔗 Accès direct
          - 🌐 **Application**: http://localhost:3000
          - 📚 **API Swagger**: http://localhost:5172/swagger
          - 📊 **Fonctionnalités**: Trading en temps réel avec SignalR
          
          ## 🛠️ Stack technique
          - ✅ **Backend**: .NET 9 + Entity Framework + SignalR
          - ✅ **Frontend**: React 18 + TypeScript + Tailwind CSS
          - ✅ **Database**: SQL Server
          - ✅ **Real-time**: WebSockets pour prix en temps réel
          - ✅ **Container**: Docker + Docker Compose
          
          ## 📦 Images Docker
          - API: `ghcr.io/${{ github.repository }}/stocktrader-api:latest`
          - Frontend: `ghcr.io/${{ github.repository }}/stocktrader-frontend:latest`
        draft: false
        prerelease: false